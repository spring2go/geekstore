# Copyright (c) 2020 GeekStore.
# All rights reserved.
extend type Query {
    "The active Customer"
    activeCustomer: Customer

    """
    The active Order. Will be `null` until an Order is created via `addItemToOrder`. Once an Order reaches the
    state of `PaymentApproved` or `PaymentSettled`, then that Order is no longer considered "active" and this
    query will once again return `null`.
    """
    activeOrder: Order

    "A list of Collections available to the shop"
    collections(options: CollectionListOptions): CollectionList!

    "Return a Collection either by its id or slug. If neither 'id' nor 'slug' is specified, an error will result."
    collection(id: ID, slug: String): Collection

    "Returns a list of eligible shipping methods based on the current active Order"
    eligibleShippingMethods: [ShippingMethodQuote!]!

    "Return information about the current authenticated User"
    me: CurrentUser

    "Returns the possible next states that the activeOrder can transition to"
    nextOrderStates: [String!]!

    """
    Returns an Order based on the id. Note that in the Shop API, only orders belonging to the
    currently-authenticated User may be queried.
    """
    order(id: ID!): Order

    """
    Returns an Order based on the order `code`. For guest Orders (i.e. Orders by non-authenticated Customers)
    this query will only return the Order within 2 hours of the Order being placed. This allows an Order confirmation
    screen to be shown immediately after completion of a guest checkout, yet prevents security risks of allowing
    general anonymous access to Order data.
    """
    orderByCode(code: String!): Order

    "Get a Product either by id or slug. If neither 'id' nor 'slug' is specified, an error will result."
    product(id: ID, slug: String): Product

    "Get list of Products"
    products(options: ProductListOptions): ProductList!

    "Search Products based on the criteria set by the `SearchInput`"
    search(input: SearchInput!): SearchResponse!
}

extend type Mutation {
    "Adds an item to the order."
    addItemToOrder(productVariantId: ID!, quantity: Int!): Order
    "Remove an OrderLine from the Order"
    removeOrderLine(orderLineId: ID!): Order
    "Remove all OrderLine from the Order"
    removeAllOrderLines: Order
    "Adjusts an OrderLine."
    adjustOrderLine(orderLineId: ID!, quantity: Int!): Order
    "Applies the given coupon code to the active Order"
    applyCouponCode(couponCode: String!): Order
    "Removes the given coupon code from the active Order"
    removeCouponCode(couponCode: String!): Order
    "Transitions an Order to a new state. Valid next states can be found by querying `nextOrderStates`"
    transitionOrderToState(state: String!): Order
    "Sets the shipping address for this order"
    setOrderShippingAddress(input: CreateAddressInput!): Order
    "Sets the billing address for this order"
    setOrderBillingAddress(input: CreateAddressInput!): Order
    "Sets the shipping method by id, which can be obtained with the `eligibleShippingMethods` query"
    setOrderShippingMethod(shippingMethodId: ID!): Order
    "Add a Payment to the Order"
    addPaymentToOrder(input: PaymentInput!): Order
    "Set the Customer for the Order. Required only if the Customer is not currently logged in"
    setCustomerForOrder(input: CreateCustomerInput!): Order

    "Authenticates the user using the native authentication strategy. This mutation is an alias for `authenticate({ navtive: { ... }}}`"
    login(username: String!, password: String!, rememberMe: Boolean): LoginResult!
    "Authenticates the user using a named authentication strategy"
    authenticate(input: AuthenticationInput!, rememberMe: Boolean): LoginResult!
    "End the current authenticated session"
    logout: Boolean!
    "Regenerate and send a verification token for a new Customer registration. Only applicable if `authOptions.requireVerification` is set to true."
    refreshCustomerVerification(emailAddress: String!): Boolean!
    """
    Register a Customer account with the given credentials. There are three possible registration flows:

    _If `authOptions.requireVerification` is set to `true`:_

    1. **The Customer is registered _with_ a password**. A verificationToken will be created (and typically emailed to the Customer). That
    verificationToken would then be passed to the `verifyCustomerAccount` mutation _without_ a password. The Customer is then
    verified and authenticated in one step.
    2. **The Customer is registered _without_ a password**. A verificationToken will be created (and typically emailed to the Customer). That
    verificationToken would then be passed to the `verifyCustomerAccount` mutation _with_ the chosed password of the Customer. The Customer is then
    verified and authenticated in one step.

    _If `authOptions.requireVerification` is set to `false`:_

    3. The Customer _must_ be registered _with_ a password. No further action is needed - the Customer is able to authenticate immediately.
    """
    registerCustomerAccount(input: RegisterCustomerInput!): Boolean!
    "Update an existing Customer"
    updateCustomer(input: UpdateCustomerInput!): Customer!
    "Create a new Customer Address"
    createCustomerAddress(input: CreateAddressInput!): Address!
    "Update an existing Address"
    updateCustomerAddress(input: UpdateAddressInput!): Address!
    "Delete an existing Address"
    deleteCustomerAddress(id: ID!): Boolean!
    """
    Verify a Customer email address with the token sent to that address. Only applicable if `authOptions.requireVerification` is set to true.

    If the Customer was not registered with a password in the `registerCustomerAccount` mutation, the a password _must_ be
    provided here.
    """
    verifyCustomerAccount(token: String!, password: String): LoginResult!
    "Update the password of the active Customer"
    updateCustomerPassword(currentPassword: String!, newPassword: String!): Boolean
    """
    Request to update the emailAddress of the active Customer. If `authOptions.requireVerification` is enabled
    (as is the default), then the `identifierChangeToken` will be assigned to the current User and
    a IdentifierChangeRequestEvent will be raised. This can then be used e.g. by the EmailPlugin to email
    that verification token to the Customer, which is then used to verify the change of email address.
    """
    requestUpdateCustomerEmailAddress(password: String!, newEmailAddress: String!): Boolean
    """
    Confirm the update of the emailAddress with the provided token, which has been generated by the
    `requestUpdateCustomerEmailAddress` mutation.
    """
    updateCustomerEmailAddress(token: String!): Boolean
    "Request a password reset email to be sent"
    requestPasswordReset(emailAddress: String!): Boolean
    "Resets a Customer's password based on the provided token"
    resetPassword(token: String!, password: String!): LoginResult!
}

input RegisterCustomerInput {
    emailAddress: String!
    title: String
    firstName: String
    lastName: String
    phoneNumber: String
    password: String
}

"""
Passed as input to the `addPaymentToOrder` mutation
"""
input PaymentInput {
    """
    This field should correspond to the `code` property of a PaymentMethodHandler.
    """
    method: String!
    """
    This field should contain arbitrary data passed to the specified PaymentMethodHandler's `createPayment()` method
    as the "metadata" argument. For example, it could contain an ID for the payment and other
    data generated by the payment provider.
    """
    metadata: JSON!
}


