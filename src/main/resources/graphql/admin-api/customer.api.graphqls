# Copyright (c) 2020 GeekStore.
# All rights reserved.
extend type Query {
    customers(options: CustomerListOptions): CustomerList!
    customer(id: ID!): Customer
}

extend type Mutation {
    "Create a new Customer. If a password is provided, a new User will also be created an linked to the Customer."
    createCustomer(input: CreateCustomerInput!, password: String): Customer!

    "Update an existing Customer"
    adminUpdateCustomer(input: UpdateCustomerInput!): Customer!

    "Delete a Customer"
    deleteCustomer(id: ID!): DeletionResponse!

    "Create a new Address and associate it with the Customer specified by customerId"
    adminCreateCustomerAddress(customerId: ID!, input: CreateAddressInput!): Address!

    "Update an existing Address"
    adminUpdateCustomerAddress(input: UpdateAddressInput!): Address!

    "Update an existing Address"
    adminDeleteCustomerAddress(id: ID!): Boolean!

    addNoteToCustomer(input: AddNoteToCustomerInput!): Customer
    updateCustomerNode(input: UpdateCustomerNoteInput!): HistoryEntry!
    deleteCustomerNote(id: ID!): DeletionResponse!
}


input UpdateCustomerInput {
    id: ID!
    title: String
    firstName: String
    lastName: String
    phoneNumber: String
    emailAddress: String
}

input AddNoteToCustomerInput {
    id: ID!
    note: String!
    privateOnly: Boolean!
}

input UpdateCustomerNoteInput {
    noteId: ID!
    note: String!
}

input CustomerListOptions {
    currentPage: Int
    pageSize: Int
    sort: CustomerSortParameter
    filter: CustomerFilterParameter
}

input CustomerSortParameter {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    firstName: SortOrder
    lastName: SortOrder
    phoneNumber: SortOrder
    emailAddress: SortOrder
}

input CustomerFilterParameter {
    firstName: StringOperators
    lastName: StringOperators
    phoneNumber: StringOperators
    emailAddress: StringOperators
    createdAt: DateOperators
    updatedAt: DateOperators
}